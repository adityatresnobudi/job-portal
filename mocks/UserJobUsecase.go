// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adityatresnobudi/job-portal/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserJobUsecase is an autogenerated mock type for the UserJobUsecase type
type UserJobUsecase struct {
	mock.Mock
}

// ApplyJob provides a mock function with given fields: ctx, job, userId
func (_m *UserJobUsecase) ApplyJob(ctx context.Context, job dto.UserJobsPayload, userId int) (dto.UserJobsDTO, error) {
	ret := _m.Called(ctx, job, userId)

	var r0 dto.UserJobsDTO
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserJobsPayload, int) dto.UserJobsDTO); ok {
		r0 = rf(ctx, job, userId)
	} else {
		r0 = ret.Get(0).(dto.UserJobsDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UserJobsPayload, int) error); ok {
		r1 = rf(ctx, job, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserJobUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserJobUsecase creates a new instance of UserJobUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserJobUsecase(t mockConstructorTestingTNewUserJobUsecase) *UserJobUsecase {
	mock := &UserJobUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
