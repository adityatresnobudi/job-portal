// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/adityatresnobudi/job-portal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserJobRepository is an autogenerated mock type for the UserJobRepository type
type UserJobRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newApply
func (_m *UserJobRepository) Create(ctx context.Context, newApply model.UserJobs) (model.UserJobs, error) {
	ret := _m.Called(ctx, newApply)

	var r0 model.UserJobs
	if rf, ok := ret.Get(0).(func(context.Context, model.UserJobs) model.UserJobs); ok {
		r0 = rf(ctx, newApply)
	} else {
		r0 = ret.Get(0).(model.UserJobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserJobs) error); ok {
		r1 = rf(ctx, newApply)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, jobId
func (_m *UserJobRepository) FindById(ctx context.Context, jobId int) (model.Jobs, error) {
	ret := _m.Called(ctx, jobId)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Jobs); ok {
		r0 = rf(ctx, jobId)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByJobIdUserId provides a mock function with given fields: ctx, jobId, userId
func (_m *UserJobRepository) FindByJobIdUserId(ctx context.Context, jobId int, userId int) ([]model.UserJobs, error) {
	ret := _m.Called(ctx, jobId, userId)

	var r0 []model.UserJobs
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []model.UserJobs); ok {
		r0 = rf(ctx, jobId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserJobs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, jobId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMinusOneQuota provides a mock function with given fields: ctx, job
func (_m *UserJobRepository) UpdateMinusOneQuota(ctx context.Context, job model.Jobs) (model.Jobs, error) {
	ret := _m.Called(ctx, job)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, model.Jobs) model.Jobs); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Jobs) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserJobRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserJobRepository creates a new instance of UserJobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserJobRepository(t mockConstructorTestingTNewUserJobRepository) *UserJobRepository {
	mock := &UserJobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
