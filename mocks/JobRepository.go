// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/adityatresnobudi/job-portal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JobRepository is an autogenerated mock type for the JobRepository type
type JobRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newJob
func (_m *JobRepository) Create(ctx context.Context, newJob model.Jobs) (model.Jobs, error) {
	ret := _m.Called(ctx, newJob)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, model.Jobs) model.Jobs); ok {
		r0 = rf(ctx, newJob)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Jobs) error); ok {
		r1 = rf(ctx, newJob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, job
func (_m *JobRepository) Delete(ctx context.Context, job model.Jobs) (model.Jobs, error) {
	ret := _m.Called(ctx, job)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, model.Jobs) model.Jobs); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Jobs) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, name
func (_m *JobRepository) FindAll(ctx context.Context, name string) ([]model.Jobs, error) {
	ret := _m.Called(ctx, name)

	var r0 []model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Jobs); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Jobs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, jobId
func (_m *JobRepository) FindById(ctx context.Context, jobId int) (model.Jobs, error) {
	ret := _m.Called(ctx, jobId)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Jobs); ok {
		r0 = rf(ctx, jobId)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExpDate provides a mock function with given fields: ctx, job, expDate
func (_m *JobRepository) UpdateExpDate(ctx context.Context, job model.Jobs, expDate time.Time) (model.Jobs, error) {
	ret := _m.Called(ctx, job, expDate)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, model.Jobs, time.Time) model.Jobs); ok {
		r0 = rf(ctx, job, expDate)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Jobs, time.Time) error); ok {
		r1 = rf(ctx, job, expDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuota provides a mock function with given fields: ctx, job, quota
func (_m *JobRepository) UpdateQuota(ctx context.Context, job model.Jobs, quota int) (model.Jobs, error) {
	ret := _m.Called(ctx, job, quota)

	var r0 model.Jobs
	if rf, ok := ret.Get(0).(func(context.Context, model.Jobs, int) model.Jobs); ok {
		r0 = rf(ctx, job, quota)
	} else {
		r0 = ret.Get(0).(model.Jobs)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Jobs, int) error); ok {
		r1 = rf(ctx, job, quota)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJobRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobRepository creates a new instance of JobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobRepository(t mockConstructorTestingTNewJobRepository) *JobRepository {
	mock := &JobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
