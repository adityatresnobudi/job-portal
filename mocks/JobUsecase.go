// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adityatresnobudi/job-portal/dto"
	mock "github.com/stretchr/testify/mock"
)

// JobUsecase is an autogenerated mock type for the JobUsecase type
type JobUsecase struct {
	mock.Mock
}

// CloseJob provides a mock function with given fields: ctx, closeJob, jobPosterId
func (_m *JobUsecase) CloseJob(ctx context.Context, closeJob dto.CloseJobsResponse, jobPosterId uint) (dto.CloseJobsResponse, error) {
	ret := _m.Called(ctx, closeJob, jobPosterId)

	var r0 dto.CloseJobsResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.CloseJobsResponse, uint) dto.CloseJobsResponse); ok {
		r0 = rf(ctx, closeJob, jobPosterId)
	} else {
		r0 = ret.Get(0).(dto.CloseJobsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CloseJobsResponse, uint) error); ok {
		r1 = rf(ctx, closeJob, jobPosterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobs provides a mock function with given fields: ctx, newJob, jobPosterId
func (_m *JobUsecase) CreateJobs(ctx context.Context, newJob dto.JobsPayload, jobPosterId uint) (dto.JobsResponse, error) {
	ret := _m.Called(ctx, newJob, jobPosterId)

	var r0 dto.JobsResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.JobsPayload, uint) dto.JobsResponse); ok {
		r0 = rf(ctx, newJob, jobPosterId)
	} else {
		r0 = ret.Get(0).(dto.JobsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.JobsPayload, uint) error); ok {
		r1 = rf(ctx, newJob, jobPosterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableJobs provides a mock function with given fields: ctx, name
func (_m *JobUsecase) GetAvailableJobs(ctx context.Context, name string) ([]dto.JobsDTO, error) {
	ret := _m.Called(ctx, name)

	var r0 []dto.JobsDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []dto.JobsDTO); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.JobsDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobsByID provides a mock function with given fields: ctx, jobId
func (_m *JobUsecase) GetJobsByID(ctx context.Context, jobId int) (dto.CloseJobsResponse, error) {
	ret := _m.Called(ctx, jobId)

	var r0 dto.CloseJobsResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.CloseJobsResponse); ok {
		r0 = rf(ctx, jobId)
	} else {
		r0 = ret.Get(0).(dto.CloseJobsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExpDate provides a mock function with given fields: ctx, updateJob, expDate, jobPosterId
func (_m *JobUsecase) UpdateExpDate(ctx context.Context, updateJob dto.CloseJobsResponse, expDate string, jobPosterId uint) (dto.CloseJobsResponse, error) {
	ret := _m.Called(ctx, updateJob, expDate, jobPosterId)

	var r0 dto.CloseJobsResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.CloseJobsResponse, string, uint) dto.CloseJobsResponse); ok {
		r0 = rf(ctx, updateJob, expDate, jobPosterId)
	} else {
		r0 = ret.Get(0).(dto.CloseJobsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CloseJobsResponse, string, uint) error); ok {
		r1 = rf(ctx, updateJob, expDate, jobPosterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuota provides a mock function with given fields: ctx, updateJob, quota, jobPosterId
func (_m *JobUsecase) UpdateQuota(ctx context.Context, updateJob dto.CloseJobsResponse, quota int, jobPosterId uint) (dto.CloseJobsResponse, error) {
	ret := _m.Called(ctx, updateJob, quota, jobPosterId)

	var r0 dto.CloseJobsResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.CloseJobsResponse, int, uint) dto.CloseJobsResponse); ok {
		r0 = rf(ctx, updateJob, quota, jobPosterId)
	} else {
		r0 = ret.Get(0).(dto.CloseJobsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CloseJobsResponse, int, uint) error); ok {
		r1 = rf(ctx, updateJob, quota, jobPosterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJobUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobUsecase creates a new instance of JobUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobUsecase(t mockConstructorTestingTNewJobUsecase) *JobUsecase {
	mock := &JobUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
